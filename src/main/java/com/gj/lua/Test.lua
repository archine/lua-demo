---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by archine.
--- DateTime: 2019/6/19 15:29
---
--[=[
    多行注释
--]=]
-- 字符串
local val = "hello"
print(val)
print("--------------")

-- 数组
local myArray = { "redis", "lua", true, 8 }
print(myArray[1])
print("--------------")

-- for
local num = 0
for i = 1, 10 do
    num = num + i
end
print(num)
print("--------------")
-- for 遍历myArray，首先需要知道tables的长度，只需要在变量前加一个#号即可：
for i = 1, #myArray do
    print(myArray[i])
end
print("--------------")
-- for Lua还提供了内置函数ipairs，使用for index，value ipairs（tables）可以遍历出所有的索引下标和值：
for index, value in ipairs(myArray) do
    print(index)
    print(value)
end
print("--------------")
-- while 下面代码同样会计算1到10的和，只不过使用的是while循环，while循环同样以end作为结束符。
local sum = 0
local i = 0
while i <= 10 do
    sum = sum + i
    i = i + 1
end
print(sum)
print("----------------------")
-- if else 确定数组中是否包含了redis，有则打印true，注意if以end结尾，if后紧跟then：
local myTable2 = { "python", "redis", "java" }
for i2 = 1, #myTable2 do
    if myTable2[i2] == "redis" then
        print("true")
        break
    else
        print("false")
    end
end
print("---------------")
-- hash 使用类似哈希的功能，同样可以使用tables类型，例如下面代码定义了一个tables，每个元素包含了key和value，其中".."是将两个字符串进行连接：
user = { age = 10, name = "tom" }
print("user age is" .. user["age"])
-- 如果要遍历user，可以使用Lua的内置函数pairs：
for key, value in pairs(user) do
    print(key .. value)
end
print("-------------")
-- 函数定义 Lua中，函数以function开头，以end结尾，funcName是函数名，中间部分是函数体：
function add(param1, param2)
    return param1 + param2
end
print(add(1,2))